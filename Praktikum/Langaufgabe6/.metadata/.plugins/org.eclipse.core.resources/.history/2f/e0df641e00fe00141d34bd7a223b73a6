import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Anwendung {
	

	//_____________________Interval___________________________
	private static void startInterval(String path) {

		try {

			//Datei wird eingelesen
			ArrayList<Interval> A = new ArrayList<Interval>();

			//Datei wird geöffnet
			RandomAccessFile file = new RandomAccessFile(path, "r");
			//Zeile für Zeile wird jetzt als ein Intervall interpretiert
			String zeile = file.readLine();
			while (zeile != null) {

				StringTokenizer st = new StringTokenizer(zeile, ",");

				int start = Integer.parseInt(st.nextToken());
				int end = Integer.parseInt(st.nextToken());

				Interval ivall = new Interval(start, end);
				A.add(ivall);
				zeile = file.readLine();
			}
			file.close();
			
			//Ausgabe
			System.out.println("Unsortiert: ");
			printIntervalArrayList(A);
			Collections.sort(A);
			System.out.println("Sortiert: ");
			printIntervalArrayList(A);

			//Ausgabe nach IntevalScheduling
			System.out.println("Berechnetes Intervalscheduling: ");
			printIntervalArrayList(intervalScheduling(A));
		} catch (Exception e) {
			//Wird der Dateipfad nicht gefunden wird eine Exception ausgelöst
			System.out.println("Dateipfad nicht gefunden: ");
			e.printStackTrace();
		}

	}

	//Interval-Algo
	
	public static ArrayList<Interval> intervalScheduling(
			ArrayList<Interval> intervals) {

		int n = intervals.size(); //n wird die Menge an Intevallen zugewiesen
		ArrayList<Interval> A = new ArrayList<Interval>();
		A.add(intervals.get(0));//Das erste Interval der sortierten wird nun in die Ausgabe eingefügt
		int j = 0;

		for (int i = 1; i < n; i++) {
			if (intervals.get(i).getStart() >= intervals.get(j).getEnd()) { //Nun wird für jeden Interval geprüft ob es kompatibel ist
				A.add(intervals.get(i)); //wenn kompatiblität vorliegt wird es in die Ausgabe eingefügt
				j = i;
			}
		}

		return A;
	}
	
	
	
	//_______________________Lateness________________________________________

	private static void startLateness(String path) { // die Datei Werden eingelesen analog zu Oben!
		try {
			
			ArrayList<Job> A = new ArrayList<Job>();

			RandomAccessFile file = new RandomAccessFile(path, "r");

			String zeile = file.readLine();
			while (zeile != null) {

				StringTokenizer st = new StringTokenizer(zeile, ",");

				int start = Integer.parseInt(st.nextToken());
				int end = Integer.parseInt(st.nextToken());

				Job job = new Job(start, end);
				A.add(job);

				zeile = file.readLine();

			}

			file.close();
			System.out.println("Unsortiert: ");
			printJobArrayList(A);
			Collections.sort(A);
			System.out.println("Sortiert: ");
			printJobArrayList(A);
			System.out.println("Berechnetes Latenessscheduling");
			printArray(latenessScheduling(A));

		} catch (IOException e) {
			System.out.println("Dateipfad nicht gefunden: ");
			e.printStackTrace();
			
		}

	}
	
	//Lateness-Algo
	public static int[] latenessScheduling(ArrayList<Job> jobs) {
		int maxVerspaetung = 0; 
		int n = jobs.size(); // um alle Tupel zu betrachen
		int[] A = new int[n];
		int z = 0; // Summe alle jobsdauer siehe Beispiel

		for (int i = 0; i < n; i++) {
			A[i] = z;
			z += jobs.get(i).getDauer();
			int verspaetung = z-jobs.get(i).getDeadline();
			if(verspaetung > maxVerspaetung) maxVerspaetung = verspaetung;
		}
		
		
		System.out.println("Versp�tung: "+maxVerspaetung);
		return A;
	}
	
	
	
	//______________________Ausgaben____________________________________________
	private static void printIntervalArrayList(ArrayList<Interval> A) {

		System.out.print("[");
		for (int i = 0; i < A.size(); i++) {
			System.out.print(A.get(i).toString()); //Ausgabe der Intervalle in einer AL
		}
		System.out.println("]");
	}
	
	private static void printJobArrayList(ArrayList<Job> A){
		
		System.out.print("[");
		for(int i = 0; i<A.size()-1;i++){
			System.out.print(A.get(i).toString()+","); //Ausgabe der Jobs in einer AL
		}
		System.out.print(A.get(A.size()-1).toString());
		System.out.println("]");
	}
	
	private static void printArray(int[] A){
		System.out.print("[");
		for(int i = 0; i<A.length-1; i++){//Ausgabe eines Arrays
			System.out.print(A[i]+", ");
		}
		System.out.print(A[A.length-1]);
		System.out.println("]");
	}

	// _____________________________Main____________________________________________

	public static void main(String[] args) {
		String methode = "i";
		String path = null;

		if (args.length == 2) {// TODO Fehlerbehandlung
			methode = args[0];
			path = args[1];
		}else{
			//Wenn die anzahl der Argumente unpassend ist
			throw new RuntimeException("Anzahl der Argumente muss zwei betragen!");
		}

		if (methode.equals("Interval")) {
			System.out.println("Bearbeite Datei '"+path+"'");
			startInterval(path);

		} else if(methode.equals("Lateness")) {
			System.out.println("Bearbeite Datei '"+path+"'");
			startLateness(path);

		} else{
			// erstes Argument muss Interval oder Lateness betragen
			throw new IllegalArgumentException("Erstes Argument muss entweder 'Interval' oder 'Lateness' sein");
		}

	}
}