import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class Anwendung {
	public static ArrayList<Interval> intervalScheduling(
			ArrayList<Interval> intervals) {

		int n = intervals.size();
		ArrayList<Interval> A = new ArrayList<Interval>();
		A.add(intervals.get(0));
		int j = 0;

		for (int i = 1; i < n; i++) {
			if (intervals.get(i).getStart() >= intervals.get(j).getEnd()) {
				A.add(intervals.get(i));
				j = i;
			}
		}

		return A;
	}

	public static int[] latenessScheduling(ArrayList<Job> jobs) {
		int n = jobs.size();
		int[] A = new int[n];
		int z = 0;

		for (int i = 0; i < n; i++) {
			A[i] = z;
			z += jobs.get(i).getDauer();
		}

		return A;
	}

	

	public static void main(String[] args) {
		String methode = "i";
		String path = null;
		
		if (args.length == 2) {// TODO Fehlerbehandlung
			methode = args[0];
			path = args[1];
			System.out.println("Methode :"+methode+"Pfad: "+path);
		}

		String zeile;
		try {
			if (methode == "i") {
				System.out.println("Interval:");
				ArrayList<Interval> A = new ArrayList<Interval>();

				RandomAccessFile file = new RandomAccessFile(path, "r");

				zeile = file.readLine();
				while (zeile != null) {

					StringTokenizer st = new StringTokenizer(zeile, ",");

					int start = Integer.parseInt(st.nextToken());
					int end = Integer.parseInt(st.nextToken());

					Interval ivall = new Interval(start, end);
					A.add(ivall);
					zeile = file.readLine();
				}

				
				Collections.sort(A);
				ArrayList<Interval> test = intervalScheduling(A);
				System.out.println("Ausgabe des Ergebnisses:");
				for (int i = 0; i < test.size(); i++) {
					System.out.println(test.get(i));
				}

			}

			else {
				System.out.println("Lateness:");
				ArrayList<Job> A = new ArrayList<Job>();

				RandomAccessFile file = new RandomAccessFile(path, "r");

				zeile = file.readLine();
				while (zeile != null) {

					StringTokenizer st = new StringTokenizer(zeile, ",");

					int start = Integer.parseInt(st.nextToken());
					int end = Integer.parseInt(st.nextToken());

					Job job = new Job(start, end);
					A.add(job);
					zeile = file.readLine();
				}

				
				file.close();
				Collections.sort(A);

				int[] test = latenessScheduling(A);
				System.out.println("Ausgabe des Ergebnisses:");
				for (int i = 0; i < test.length; i++) {
					System.out.println(test[i]);
				}

			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		

	}
}