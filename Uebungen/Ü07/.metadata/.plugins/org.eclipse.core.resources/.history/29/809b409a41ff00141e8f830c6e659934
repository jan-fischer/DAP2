import java.util.Random;

public class Main {

	static int[] mem;

	public static int Z(int[] A, int i, int j) {

		if (i > 0 && A[i - 1] < A[i]) {

			return Z(A, i - 1, j);
		} else if (i > 0 && A[i - 1] >= A[i]) {
			int temp;
			if (mem[i] > -1)
				temp = mem[i];
			else
				temp = Z(A, i - 1, i - 1);
			return Math.max(temp, j - i + 1);
		} else {

			return j - i + 1;
		}
	}

	public static void bottomUp(int[] A, int n) {
		for (int i = 0; i < n; i++) {
			mem[i] = Z(A, i, i);
		}

	}

	public static void initMemoFeld(int n) {
		mem = new int[n];
		for (int i = 0; i < n; i++) {
			mem[i] = -1;
		}
	}

	public static int[] initRandomFeld(int n) {
		Random numberGenerator = new Random();
		int[] A = new int[n];
		for (int i = 0; i < n; i++) {
			A[i] = Math.abs(numberGenerator.nextInt() / 10000000);
		}

		return A;
	}

	public static void print1DArray(int[] A) {

		for (int i = 0; i < A.length; i++) {
			System.out.print(i + "\t");
		}
		System.out.println();
		for (int i = 0; i < A.length; i++) {
			System.out.print(A[i] + "\t");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		int[] A = initRandomFeld(50000);
		initMemoFeld(A.length);

		System.out.println(Z(A, A.length - 1, A.length - 1));
		bottomUp(A, A.length);
		System.out.println("Sequenz:");
		print1DArray(A);

		System.out.println("Dynamische Programmierung:");
		print1DArray(mem);

	}
}
